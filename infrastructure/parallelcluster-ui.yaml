Parameters:
  ApiGatewayRestApi:
    Description: 'Api gateway'
    Type: String
  ApiGatewayRootResourceId:
    Description: 'Root resource Id of Api gateway'
    Type: String
  ParallelClusterApiDefinitionS3Uri:
    Description: 'S3 Uri of ApiDefinition'
    Type: String
  ParallelClusterApiTemplateURL:
    Description: 'HTTP URL of ParallelClusterApi'
    Type: String
  PublicEcrImageUri:
    Description: When specified, the URI of the Docker image for the Lambda of the ParallelCluster UI container
    Type: String
    Default: public.ecr.aws/l1s7l7p8/parallelcluster-ui:2024.05.0
  VpcEndpointId:
    Description: Enter a VPC endpoint with type interface for the execute-api service to enable private PCUI implementation. When enabled, the API will only accept requests from within the given VPC.
    Type: String
    Default: ''
  LambdaSubnetIds:
    Description: Comma separated list of subnet IDs to be associated with the PCUI Lambda function. These subnets should be private and associated with your VPC endpoint.
    Type: CommaDelimitedList
    Default: ''
  LambdaSecurityGroupIds:
    Description: Comma separated list of security groups to be associated with the PCUI Lambda function.
    Type: CommaDelimitedList
    Default: ''
  AuthType:
    AllowedValues:
      - cognito
      - azuread
    Default: azuread
    Description: Supported authentication type.
    Type: String
  CognitoRegion:
    Description: Region in which Cognito stack was deployed.
    Type: String
    Default: ''
  CognitoAppClientId:
    Description: The id of the app client.
    Type: String
    Default: ''
  CognitoAccessKey:
    Description: The access key for Cognito.
    Type: String
    Default: ''
  CognitoSecretKey:
    Description: The secret key for Cognito.
    Type: String
    Default: ''
  CognitoUserPoolAuthDomain:
    Description: UserPoolAuthDomain of a previously deployed PCUI Cognito User Pool. Leave blank to create a new one.
    Type: String
    Default: ''
  CognitoUserPoolSecretName:
    Description: 'Name of Cognito UserPool Secret'
    Type: String
  AzureADAppClientId:
    Description: The id of the Azure app client.
    Type: String
    Default: ''
  AzureADAppClientSecret:
    Description: The secret of the Azure app client.
    Type: String
    Default: ''
  AzureADTenantId:
    Description: The id of the Azure tenant.
    Type: String
    Default: ''
  Version:
    Description: Version of AWS ParallelCluster to deploy
    Type: String
    Default: 3.9.1
  ImageBuilderVpcId:
    Description: (Optional) Select the VPC to use for building the container images. If not selected, default VPC will be used.
    Type: String
    Default: ''
  ImageBuilderSubnetId:
    Description: (Optional) Select the subnet to use for building the container images (public subnets only). If not selected, Subnet in the default VPC will be used.
    Type: String
    Default: ''
  InfrastructureBucket:
    Description: (Optional) S3 bucket where CloudFormation files are stored. Change this parameter only when testing changes made to the infrastructure itself.
    Type: String
    Default: ''
  PermissionsBoundaryPolicy:
    Type: String
    Description: 'ARN of the IAM policy to use as permissions boundary for every IAM role created by ParallelCluster UI infrastructure.'
    Default: ''
    AllowedPattern: "^(arn:.*:iam::.*:policy\\/([a-zA-Z0-9_-]+))|()$"
  PermissionsBoundaryPolicyPCAPI:
    Type: String
    Description: 'ARN of the IAM policy to use as permissions boundary for every IAM role created by ParallelCluster API infrastructure. [ParallelCluster >= 3.8.0]'
    Default: ''
    AllowedPattern: "^(arn:.*:iam::.*:policy\\/([a-zA-Z0-9_-]+))|()$"
  IAMRoleAndPolicyPrefix:
    Type: String
    Description: 'Prefix applied to the name of every IAM role and policy (max length: 10). [ParallelCluster >= 3.8.0]'
    Default: ''
    MaxLength: 10

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ParallelCluster UI
        Parameters:
          - PublicEcrImageUri
          - AuthType
          - ApiGatewayRestApi
          - ApiGatewayRootResourceId
      - Label:
          default: (Optional) Private PCUI
        Parameters:
          - VpcEndpointId
          - LambdaSubnetIds
          - LambdaSecurityGroupIds
      - Label:
          default: (Optional) External PCUI Cognito
        Parameters:
          - CognitoRegion
          - CognitoAppClientId
          - CognitoAccessKey
          - CognitoSecretKey
          - CognitoUserPoolAuthDomain
          - CognitoUserPoolSecretName
      - Label:
          default: (Optional) External PCUI Azure AD
        Parameters:
          - AzureADAppClientId
          - AzureADAppClientSecret
          - AzureADTenantId
      - Label:
          default: ParallelCluster API
        Parameters:
          - ParallelClusterApiDefinitionS3Uri
          - ParallelClusterApiTemplateURL
          - Version
      - Label:
          default: (Optional) ImageBuilder Custom VPC
        Parameters:
          - ImageBuilderVpcId
          - ImageBuilderSubnetId
      - Label:
          default: (Optional) Permissions
        Parameters:
          - IAMRoleAndPolicyPrefix
          - PermissionsBoundaryPolicy
          - PermissionsBoundaryPolicyPCAPI
      - Label:
          default: (Debugging only) Infrastructure S3 Bucket
        Parameters:
          - InfrastructureBucket

    ParameterLabels:
      UserPoolAuthDomain:
        default: UserPoolAuthDomain from a previously deployed PCUI

Conditions:
  NonDefaultVpc:
    Fn::And:
      - !Not [!Equals [!Ref ImageBuilderVpcId, ""]]
      - !Not [!Equals [!Ref ImageBuilderSubnetId, ""]]
  IsPrivate: !Not [!Equals [!Ref VpcEndpointId, ""]]
  HasDefaultInfrastructure: !Equals [!Ref InfrastructureBucket, '']
  UseNonDockerizedPCAPI:
    !Not [ Condition: UseDockerizedPCAPI]
  UseDockerizedPCAPI: !And
    - !Equals ['3', !Select [ 0, !Split ['.', !Ref Version] ] ] # Check PC version major is 3 and PC version minor is 0-5
    - !Or
      - !Equals ['0', !Select [ 1, !Split ['.', !Ref Version] ] ]
      - !Equals ['1', !Select [ 1, !Split ['.', !Ref Version] ] ]
      - !Equals ['2', !Select [ 1, !Split ['.', !Ref Version] ] ]
      - !Equals ['3', !Select [ 1, !Split ['.', !Ref Version] ] ]
      - !Equals ['4', !Select [ 1, !Split ['.', !Ref Version] ] ]
      - !Equals ['5', !Select [ 1, !Split ['.', !Ref Version] ] ]
  InGovCloud: !Equals ['aws-us-gov', !Ref "AWS::Partition"]
  UsePermissionBoundary: !Not [!Equals [!Ref PermissionsBoundaryPolicy, '']]
  UsePermissionBoundaryPCAPI: !Not [!Equals [!Ref PermissionsBoundaryPolicyPCAPI, '']]
  UseIAMRoleAndPolicyPrefix: !Not [!Equals [!Ref IAMRoleAndPolicyPrefix, '']]
  InCNCloud: !Equals ["aws-cn", !Ref "AWS::Partition"]
  AuthWithCognito: !Equals ["cognito", !Ref AuthType]
  AuthWithAzureAD: !Equals ["azuread", !Ref AuthType]

Mappings:
  ParallelClusterUI:
    Constants:
      Version: 2024.05.0 # format YYYY.MM.REVISION

Resources:

  ParallelClusterApi:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PermissionsBoundaryPolicy: !If [ UsePermissionBoundaryPCAPI, !Ref PermissionsBoundaryPolicyPCAPI, !Ref AWS::NoValue ]
        IAMRoleAndPolicyPrefix: !If [ UseIAMRoleAndPolicyPrefix, !Ref IAMRoleAndPolicyPrefix, !Ref AWS::NoValue ]
        ApiDefinitionS3Uri: !Ref ParallelClusterApiDefinitionS3Uri
        CreateApiUserRole: False
        EnableIamAdminAccess: True
        VpcEndpointId: !If [ IsPrivate, !Ref VpcEndpointId, !Ref AWS::NoValue ]
        ImageBuilderSubnetId: !If
          - UseNonDockerizedPCAPI
          - !Ref AWS::NoValue
          - Fn::If:
              - NonDefaultVpc
              - !Ref ImageBuilderSubnetId
              - !Ref AWS::NoValue
        ImageBuilderVpcId: !If
          - UseNonDockerizedPCAPI
          - !Ref AWS::NoValue
          - Fn::If:
            - NonDefaultVpc
            - !Ref ImageBuilderVpcId
            - !Ref AWS::NoValue
      TemplateURL: !Ref ParallelClusterApiTemplateURL
      TimeoutInMinutes: 30

  ParallelClusterUIFunWithCognito:
    Condition: AuthWithCognito
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ParallelClusterUIUserRole.Arn
      PackageType: Image
      MemorySize: 512
      Timeout: 900
      Tags:
        - Key: 'parallelcluster:ui:version'
          Value: !FindInMap [ ParallelClusterUI, Constants, Version ]
      TracingConfig:
        Mode: Active
      VpcConfig:
        Fn::If:
          - IsPrivate
          - SubnetIds: !Ref LambdaSubnetIds
            SecurityGroupIds: !Ref LambdaSecurityGroupIds
          - !Ref AWS::NoValue
      Environment:
        Variables:
          API_BASE_URL: !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]
          API_VERSION: !Ref Version
          SITE_URL: !Sub
           - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/pcui
           - Api: !Ref ApiGatewayRestApi
          AUTH_TYPE: !Ref AuthType
          AUTH_PATH: !Ref CognitoUserPoolAuthDomain
          SECRET_ID: !Ref CognitoUserPoolSecretName
          CLIENT_ID: !Ref CognitoAppClientId
          COGNITO_REGION: !Ref CognitoRegion
          COGNITO_ACCESS_KEY: !Ref CognitoAccessKey
          COGNITO_SECRET_KEY: !Ref CognitoSecretKey
          OIDC_PROVIDER: 'Cognito'
      FunctionName: !Sub
        - ParallelClusterUIFun-${StackIdSuffix}
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Code:
        ImageUri: !Sub
          - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${Repository}:${Version}
          - Repository: !Ref PrivateEcrRepository
            Version: !Join
              - '-'
              - [!Select [2, !Split ['/', !Ref EcrImage]], !Select [3, !Split ['/', !Ref EcrImage]]]

  ParallelClusterUIFunWithAzureAD:
    Condition: AuthWithAzureAD
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ParallelClusterUIUserRole.Arn
      PackageType: Image
      MemorySize: 512
      Timeout: 900
      Tags:
        - Key: 'parallelcluster:ui:version'
          Value: !FindInMap [ ParallelClusterUI, Constants, Version ]
      TracingConfig:
        Mode: Active
      VpcConfig:
        Fn::If:
          - IsPrivate
          - SubnetIds: !Ref LambdaSubnetIds
            SecurityGroupIds: !Ref LambdaSecurityGroupIds
          - !Ref AWS::NoValue
      Environment:
        Variables:
          API_BASE_URL: !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]
          API_VERSION: !Ref Version
          SITE_URL: !Sub
           - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/pcui
           - Api: !Ref ApiGatewayRestApi
          AUTH_TYPE: !Ref AuthType
          CLIENT_ID: !Ref AzureADAppClientId
          CLIENT_SECRET: !Ref AzureADAppClientSecret
          TENANT_ID: !Ref AzureADTenantId
          OIDC_PROVIDER: 'AzureAD'
      FunctionName: !Sub
        - ParallelClusterUIFun-${StackIdSuffix}
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Code:
        ImageUri: !Sub
          - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${Repository}:${Version}
          - Repository: !Ref PrivateEcrRepository
            Version: !Join
              - '-'
              - [!Select [2, !Split ['/', !Ref EcrImage]], !Select [3, !Split ['/', !Ref EcrImage]]]

  ApiGatewayProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: '{proxy+}'

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ParallelClusterUIFun-${StackIdSuffix}/invocations
          - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayRootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:ParallelClusterUIFun-${StackIdSuffix}/invocations
          - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }

  ApiGatewayLogRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${IAMRoleAndPolicyPrefix}ApiGatewayLogRole-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      PermissionsBoundary: !If [UsePermissionBoundary, !Ref PermissionsBoundaryPolicy, !Ref 'AWS::NoValue']

  ApiGatewayAccessLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 90

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLogRole.Arn

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayRestStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiGatewayAccount
    Properties: 
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayAccessLog.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","path":"$context.path", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref ApiGatewayDeployment
      StageName: pcui
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: 50
          ThrottlingRateLimit: 100

  PrivateEcrRepository:
    DependsOn: ParallelClusterApi
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub
        - 'parallelcluster-ui-${StackIdSuffix}'
        - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }

  ImageBuilderInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${IAMRoleAndPolicyPrefix}ImageBuilderInstanceRole-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
        Version: '2012-10-17'
      Path: /executionServiceEC2Role/
      PermissionsBoundary: !If [UsePermissionBoundary, !Ref PermissionsBoundaryPolicy, !Ref 'AWS::NoValue']

  ImageBuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub
        - ${IAMRoleAndPolicyPrefix}ImageBuilderInstanceProfile-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      Path: /executionServiceEC2Role/
      Roles:
        - !Ref ImageBuilderInstanceRole

  InfrastructureConfigurationSecurityGroup:
    Condition: NonDefaultVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref ImageBuilderVpcId
      GroupDescription: Parallel cluster image builder security group

  InfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub
        - ParallelClusterUIImageBuilderInfrastructureConfiguration-${Version}-${StackIdSuffix}
        - { Version: !Join ['_', !Split ['.', !FindInMap [ParallelClusterUI, Constants, Version]]], StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      InstanceProfileName: !Ref ImageBuilderInstanceProfile
      TerminateInstanceOnFailure: true
      SubnetId:
        Fn::If:
          - NonDefaultVpc
          - !Ref ImageBuilderSubnetId
          - !Ref AWS::NoValue
      SecurityGroupIds:
        Fn::If:
          - NonDefaultVpc
          - [!Ref InfrastructureConfigurationSecurityGroup]
          - !Ref AWS::NoValue
      InstanceMetadataOptions:
        HttpTokens: required

  EcrImageRecipe:
    Type: AWS::ImageBuilder::ContainerRecipe
    Properties:
      Components:
        - ComponentArn: !Sub arn:${AWS::Partition}:imagebuilder:${AWS::Region}:aws:component/update-linux/x.x.x
      ContainerType: DOCKER
      Name: !Sub
        - 'parallelcluster-ui-${Version}-${StackIdSuffix}'
        - { Version: !Join ['_', !Split ['.', !FindInMap [ParallelClusterUI, Constants, Version]]], StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Version: !FindInMap [ParallelClusterUI, Constants, Version]
      ParentImage: !Ref PublicEcrImageUri
      PlatformOverride: Linux
      TargetRepository:
        Service: ECR
        RepositoryName: !Ref PrivateEcrRepository
      DockerfileTemplateData: 'FROM {{{ imagebuilder:parentImage }}}'
      WorkingDirectory: '/tmp'

  EcrImage:
    Type: AWS::ImageBuilder::Image
    Properties:
      ContainerRecipeArn: !Ref EcrImageRecipe
      EnhancedImageMetadataEnabled: true
      InfrastructureConfigurationArn: !Ref InfrastructureConfiguration
      ImageTestsConfiguration:
        ImageTestsEnabled: false

  EcrImagePipeline:
    Type: AWS::ImageBuilder::ImagePipeline
    Properties:
      Name: !Sub
        - 'EcrImagePipeline-${Version}-${StackIdSuffix}'
        - { Version: !Join ['_', !Split ['.', !FindInMap [ParallelClusterUI, Constants, Version]]], StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      Status: ENABLED
      ContainerRecipeArn: !Ref EcrImageRecipe
      InfrastructureConfigurationArn: !Ref InfrastructureConfiguration
      ImageTestsConfiguration:
        ImageTestsEnabled: false

  EcrImageDeletionLambda:
    Type: AWS::Lambda::Function
    Properties:
      MemorySize: 128
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import random
          import string

          ecr = boto3.client('ecr')
          imagebuilder = boto3.client('imagebuilder')

          def get_image_ids(repository_name, version):
              image_digests = set()
              paginator = ecr.get_paginator('list_images')
              response_iterator = paginator.paginate(repositoryName=repository_name, filter={'tagStatus': 'TAGGED'})
              for response in response_iterator:
                  image_digests.update([image_id['imageDigest'] for image_id in response['imageIds']])
              return list({'imageDigest': image_digest} for image_digest in image_digests)

          def get_imagebuilder_images(ecr_image_pipeline_arn):
              response = imagebuilder.list_image_pipeline_images(imagePipelineArn=ecr_image_pipeline_arn)
              images = [image['arn'] for image in response['imageSummaryList']]
              while 'nextToken' in response:
                  response = imagebuilder.list_image_pipeline_images(imagePipelineArn=ecr_image_pipeline_arn, nextToken=response['nextToken'])
                  images.extend([image['arn'] for image in response['imageSummaryList']])
              return images

          def create_physical_resource_id():
              alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
              return ''.join(random.choice(alnum) for _ in range(16))

          def handler(event, context):
              print(event)
              print('boto version {}'.format(boto3.__version__))

              response_data = {}
              reason = None
              response_status = cfnresponse.SUCCESS

              if event['RequestType'] == 'Create':
                  response_data['Message'] = 'Resource creation successful!'
                  physical_resource_id = create_physical_resource_id()
              else:
                  physical_resource_id = event['PhysicalResourceId']

              if event['RequestType'] == 'Update' or event['RequestType'] == 'Delete':
                  try:
                      resource_key = 'OldResourceProperties' if 'OldResourceProperties' in event else 'ResourceProperties'
                      ecr_repository_name = event[resource_key]['EcrRepositoryName']
                      ecr_image_pipeline_arn = event[resource_key]['EcrImagePipelineArn']
                      version = event[resource_key]['Version']

                      image_ids = get_image_ids(ecr_repository_name, version)
                      if image_ids:
                          ecr.batch_delete_image(repositoryName=ecr_repository_name, imageIds=image_ids)
                          reason = 'Image deletion successful!'
                      else:
                          reason = 'No image found, considering image deletion successful'

                      for imagebuilder_image in get_imagebuilder_images(ecr_image_pipeline_arn):
                          imagebuilder.delete_image(imageBuildVersionArn=imagebuilder_image)

                  except ecr.exceptions.RepositoryNotFoundException:
                      reason = 'Repository was not found, considering image deletion successfull'
                  except Exception as exception:
                      response_status = cfnresponse.FAILED
                      reason = 'Failed image deletion with error: {}'.format(exception)

              cfnresponse.send(event, context, response_status, response_data, physical_resource_id, reason)

      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt EcrImageDeletionLambdaRole.Arn

  EcrImageDeletionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${EcrImageDeletionLambda}

  EcrImageDeletionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${IAMRoleAndPolicyPrefix}EcrImageDeletionLambdaRole-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${IAMRoleAndPolicyPrefix}LogsPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:*:*:*
        - PolicyName: !Sub ${IAMRoleAndPolicyPrefix}EcrPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchDeleteImage
                  - ecr:ListImages
                Resource: !GetAtt PrivateEcrRepository.Arn
              - Effect: Allow
                Action:
                  - imagebuilder:ListImagePipelineImages
                Resource: !Sub
                  - arn:${AWS::Partition}:imagebuilder:${AWS::Region}:${AWS::AccountId}:image-pipeline/ecrimagepipeline-*${StackIdSuffix}*
                  - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
              - Effect: Allow
                Action:
                  - imagebuilder:DeleteImage
                Resource: !Sub
                  - arn:${AWS::Partition}:imagebuilder:${AWS::Region}:${AWS::AccountId}:image/*${StackIdSuffix}*
                  - { StackIdSuffix: !Select [2, !Split ['/', !Ref 'AWS::StackId']] }
      PermissionsBoundary: !If [UsePermissionBoundary, !Ref PermissionsBoundaryPolicy, !Ref 'AWS::NoValue']

  EcrImagesRemover:
    Type: Custom::EcrImagesRemover
    Properties:
      ServiceToken: !GetAtt EcrImageDeletionLambda.Arn
      EcrRepositoryName: !Ref PrivateEcrRepository
      Version: !FindInMap [ParallelClusterUI, Constants, Version]
      EcrImagePipelineArn: !GetAtt EcrImagePipeline.Arn

  ParallelClusterUILambdaLogGroupWithCognito:
    Condition: AuthWithCognito
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParallelClusterUIFunWithCognito}
      RetentionInDays: 90

  ParallelClusterUILambdaLogGroupWithAzureAD:
    Condition: AuthWithAzureAD
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ParallelClusterUIFunWithAzureAD}
      RetentionInDays: 90

  ParallelClusterUIUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - ${IAMRoleAndPolicyPrefix}ParallelClusterUIUserRole-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        # Required for Lambda logging and XRay
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSXRayDaemonWriteAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # Access to the ParllelCluster API
        - !Ref ParallelClusterApiGatewayInvoke
        # Required to run ParallelClusterUI functionalities
        - !Ref EC2Policy
        - !Ref DescribeFsxPolicy
        - !Ref DescribeEfsPolicy
        - !Ref CostMonitoringAndPricingPolicy
        - !Ref SsmSendPolicy
        - !Ref SsmGetCommandInvocationPolicy
      PermissionsBoundary: !If [UsePermissionBoundary, !Ref PermissionsBoundaryPolicy, !Ref 'AWS::NoValue']


  ParallelClusterUIApiGatewayInvokeWithCognito:
    Condition: AuthWithCognito
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ParallelClusterUIFunWithCognito.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*
        - { ApiGateway: !Ref ApiGatewayRestApi }

  ParallelClusterUIApiGatewayInvokeWithAzureAD:
    Condition: AuthWithAzureAD
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ParallelClusterUIFunWithAzureAD.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*
        - { ApiGateway: !Ref ApiGatewayRestApi }

  ParallelClusterApiGatewayInvoke:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}ParallelClusterApiGatewayInvoke-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - execute-api:Invoke
            Effect: Allow
            Resource: !Sub
              - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${PCApiGateway}/*/*
              - { PCApiGateway: !Select [2, !Split ['/', !Select [0, !Split ['.', !GetAtt [ ParallelClusterApi, Outputs.ParallelClusterApiInvokeUrl ]]]]] }

  EC2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}EC2Policy-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - ec2:DescribeSecurityGroups
            - ec2:DescribeVpcs
            - ec2:DescribeInstanceTypes
            - ec2:DescribeSubnets
            - ec2:DescribeKeyPairs
            Resource:
              - '*'
            Effect: Allow
            Sid: EC2Policy
          - Action:
            - ec2:StartInstances
            - ec2:StopInstances
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*
            Condition:
              StringLike:
                ec2:ResourceTag/parallelcluster:version: "*"
            Effect: Allow
            Sid: EC2ManagePolicy
          - Fn::If:
            - IsPrivate
            - Action:
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:AttachNetworkInterface
              Resource:
                - !Sub arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*
              Effect: Allow
              Sid: PrivateDeploymentWritePolicy
            - !Ref AWS::NoValue
          - Fn::If:
            - IsPrivate
            - Action:
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeInstances
              Resource:
                - '*'
              Effect: Allow
              Sid: PrivateDeploymentReadPolicy
            - !Ref AWS::NoValue

  DescribeFsxPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}DescribeFsxPolicy-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - fsx:DescribeFileSystems
              - fsx:DescribeVolumes
              - fsx:DescribeFileCaches
            Resource:
              - !Sub arn:${AWS::Partition}:fsx:*:${AWS::AccountId}:volume/*
              - !Sub arn:${AWS::Partition}:fsx:*:${AWS::AccountId}:file-system/*
              - !Sub arn:${AWS::Partition}:fsx:*:${AWS::AccountId}:file-cache/*
            Effect: Allow
            Sid: FsxPolicy

  DescribeEfsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}DescribeEfsPolicy-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - elasticfilesystem:DescribeFileSystems
            Resource:
              - !Sub arn:${AWS::Partition}:elasticfilesystem:*:${AWS::AccountId}:file-system/*
            Effect: Allow
            Sid: EfsPolicy

  CostMonitoringAndPricingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}CostMonitoringAndPricingPolicy-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - !If
            - InGovCloud
            - !Ref AWS::NoValue
            - Action:
              - ce:ListCostAllocationTags
              - ce:UpdateCostAllocationTagsStatus
              - ce:GetCostAndUsage
              Resource:
                - '*'
              Effect: Allow
              Sid: CostMonitoringPolicy
          - !If
            - InCNCloud
            - !Ref AWS::NoValue
            - Action:
              - pricing:GetProducts
              Resource:
                - '*'
              Effect: Allow
              Sid: PricingPolicy


  SsmSendPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}SsmSendPolicy-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*
            Effect: Allow
            Sid: SsmSendPolicyInstance
            Condition:
              StringLike:
                ssm:resourceTag/parallelcluster:version: "*"
          - Action:
            - ssm:SendCommand
            Resource:
              - !Sub arn:${AWS::Partition}:ssm:*::document/AWS-RunShellScript
            Effect: Allow
            Sid: SsmSendPolicyCommand

  SsmGetCommandInvocationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub
        - ${IAMRoleAndPolicyPrefix}SsmGetCommandInvocationPolicy-${StackIdSuffix}
        - { StackIdSuffix: !Select [ 0, !Split [ '-', !Select [ 2, !Split [ '/', !Ref 'AWS::StackId' ] ] ] ] }
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - ssm:GetCommandInvocation
            Resource:
              - '*'
            Effect: Allow
            Sid: SsmGetCommandInvocationPolicy


Outputs:
  ParallelClusterUIUrl:
    Description: 'Url to reach the ParallelCluster UI Site.'
    Export:
      Name: !Sub ${AWS::StackName}-ParallelClusterUISite
    Value: !Sub
      - https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/pcui
      - Api: !Ref ApiGatewayRestApi

